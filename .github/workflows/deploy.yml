name: Build and Deploy Go AWS application

on:
  workflow_dispatch: {}
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-southeast-1
  STACK_ENV: staging
  STACK_NAME: srv
  APPLICATION: backend

  CGO_ENABLED: 0
  GOOS: linux
  GOARCH: amd64

jobs:
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        name: Checkout Repository

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAMROLE_GITHUB }}
          role-session-name: GitHub-Action-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
          cache: true

      - name: Pre Build
        run: |
          go mod download
          go mod verify
          go vet ./...
          test -z $(gofmt -l .)
          if [ -n "$(which golangci-lint)" ]; then golangci-lint run; fi

      - name: Build Application
        run: |
          echo "Building Go application from source..."
          GIT_COMMIT=${{ github.sha }}
          go build -v \
            -ldflags="-s -w \
            -X main.GitCommit=$GIT_COMMIT \
            -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S')" \
            -o bin/app server.go

      - name: Create Dist Package
        run: |
          mkdir -p dist
          cp bin/app dist/
          cp appspec.yml dist/
          cp -r scripts dist/
          cd dist
          zip -r ../dist.zip .
          cd ..

      - name: Upload Artifacts to S3
        run: |
          BUCKET=${{ env.STACK_NAME }}-${{ env.STACK_ENV }}-${{ env.AWS_REGION }}-artifacts-${{ secrets.AWS_ACCOUNT_ID }}
          aws s3 cp dist.zip s3://$BUCKET/${{ env.APPLICATION }}/${{github.sha}}/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: Dev
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: aws-actions/configure-aws-credentials@v4 # Updated to v4
        with:
          role-to-assume: ${{ secrets.IAMROLE_GITHUB }}
          role-session-name: GitHub-Action-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to AWS CodeDeploy
        run: |
          BUCKET="${{ env.STACK_NAME }}-${{ env.STACK_ENV }}-${{ env.AWS_REGION }}-artifacts-${{ secrets.AWS_ACCOUNT_ID }}"
          DEPLOYMENT_NAME="${{ env.STACK_NAME }}-${{ env.STACK_ENV }}"
          DEPLOYMENT_GROUP_NAME="${{ env.STACK_NAME }}-${{ env.STACK_ENV }}-deployment-group"

          aws deploy create-deployment \
            --application-name "${DEPLOYMENT_NAME}" \
            --deployment-group-name "${DEPLOYMENT_GROUP_NAME}" \
            --s3-location bucket=${BUCKET},bundleType=zip,key=${{ env.APPLICATION }}/${{ github.sha }}/dist.zip \
            --ignore-application-stop-failures
